// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
//#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct PubMsg {
    // message fields
    pub clientID: ::std::string::String,
    pub guid: ::std::string::String,
    pub subject: ::std::string::String,
    pub reply: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    pub connID: ::std::vec::Vec<u8>,
    pub sha256: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PubMsg {
    pub fn new() -> PubMsg {
        ::std::default::Default::default()
    }

    // string clientID = 1;

    pub fn clear_clientID(&mut self) {
        self.clientID.clear();
    }

    // Param is passed by value, moved
    pub fn set_clientID(&mut self, v: ::std::string::String) {
        self.clientID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientID(&mut self) -> &mut ::std::string::String {
        &mut self.clientID
    }

    // Take field
    pub fn take_clientID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clientID, ::std::string::String::new())
    }

    pub fn get_clientID(&self) -> &str {
        &self.clientID
    }

    // string guid = 2;

    pub fn clear_guid(&mut self) {
        self.guid.clear();
    }

    // Param is passed by value, moved
    pub fn set_guid(&mut self, v: ::std::string::String) {
        self.guid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_guid(&mut self) -> &mut ::std::string::String {
        &mut self.guid
    }

    // Take field
    pub fn take_guid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.guid, ::std::string::String::new())
    }

    pub fn get_guid(&self) -> &str {
        &self.guid
    }

    // string subject = 3;

    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }

    pub fn get_subject(&self) -> &str {
        &self.subject
    }

    // string reply = 4;

    pub fn clear_reply(&mut self) {
        self.reply.clear();
    }

    // Param is passed by value, moved
    pub fn set_reply(&mut self, v: ::std::string::String) {
        self.reply = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reply(&mut self) -> &mut ::std::string::String {
        &mut self.reply
    }

    // Take field
    pub fn take_reply(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reply, ::std::string::String::new())
    }

    pub fn get_reply(&self) -> &str {
        &self.reply
    }

    // bytes data = 5;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }

    // bytes connID = 6;

    pub fn clear_connID(&mut self) {
        self.connID.clear();
    }

    // Param is passed by value, moved
    pub fn set_connID(&mut self, v: ::std::vec::Vec<u8>) {
        self.connID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connID(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.connID
    }

    // Take field
    pub fn take_connID(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.connID, ::std::vec::Vec::new())
    }

    pub fn get_connID(&self) -> &[u8] {
        &self.connID
    }

    // bytes sha256 = 10;

    pub fn clear_sha256(&mut self) {
        self.sha256.clear();
    }

    // Param is passed by value, moved
    pub fn set_sha256(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha256 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha256(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sha256
    }

    // Take field
    pub fn take_sha256(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sha256, ::std::vec::Vec::new())
    }

    pub fn get_sha256(&self) -> &[u8] {
        &self.sha256
    }
}

impl ::protobuf::Message for PubMsg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clientID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.guid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reply)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.connID)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sha256)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.clientID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.clientID);
        }
        if !self.guid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.guid);
        }
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.subject);
        }
        if !self.reply.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.reply);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.data);
        }
        if !self.connID.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.connID);
        }
        if !self.sha256.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.sha256);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.clientID.is_empty() {
            os.write_string(1, &self.clientID)?;
        }
        if !self.guid.is_empty() {
            os.write_string(2, &self.guid)?;
        }
        if !self.subject.is_empty() {
            os.write_string(3, &self.subject)?;
        }
        if !self.reply.is_empty() {
            os.write_string(4, &self.reply)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(5, &self.data)?;
        }
        if !self.connID.is_empty() {
            os.write_bytes(6, &self.connID)?;
        }
        if !self.sha256.is_empty() {
            os.write_bytes(10, &self.sha256)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PubMsg {
        PubMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clientID",
                    |m: &PubMsg| { &m.clientID },
                    |m: &mut PubMsg| { &mut m.clientID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "guid",
                    |m: &PubMsg| { &m.guid },
                    |m: &mut PubMsg| { &mut m.guid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "subject",
                    |m: &PubMsg| { &m.subject },
                    |m: &mut PubMsg| { &mut m.subject },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reply",
                    |m: &PubMsg| { &m.reply },
                    |m: &mut PubMsg| { &mut m.reply },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &PubMsg| { &m.data },
                    |m: &mut PubMsg| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "connID",
                    |m: &PubMsg| { &m.connID },
                    |m: &mut PubMsg| { &mut m.connID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sha256",
                    |m: &PubMsg| { &m.sha256 },
                    |m: &mut PubMsg| { &mut m.sha256 },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PubMsg>(
                    "PubMsg",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PubMsg {
        static mut instance: ::protobuf::lazy::Lazy<PubMsg> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PubMsg,
        };
        unsafe {
            instance.get(PubMsg::new)
        }
    }
}

impl ::protobuf::Clear for PubMsg {
    fn clear(&mut self) {
        self.clear_clientID();
        self.clear_guid();
        self.clear_subject();
        self.clear_reply();
        self.clear_data();
        self.clear_connID();
        self.clear_sha256();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PubMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PubMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PubAck {
    // message fields
    pub guid: ::std::string::String,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PubAck {
    pub fn new() -> PubAck {
        ::std::default::Default::default()
    }

    // string guid = 1;

    pub fn clear_guid(&mut self) {
        self.guid.clear();
    }

    // Param is passed by value, moved
    pub fn set_guid(&mut self, v: ::std::string::String) {
        self.guid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_guid(&mut self) -> &mut ::std::string::String {
        &mut self.guid
    }

    // Take field
    pub fn take_guid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.guid, ::std::string::String::new())
    }

    pub fn get_guid(&self) -> &str {
        &self.guid
    }

    // string error = 2;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }

    pub fn get_error(&self) -> &str {
        &self.error
    }
}

impl ::protobuf::Message for PubAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.guid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.guid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.guid);
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.guid.is_empty() {
            os.write_string(1, &self.guid)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PubAck {
        PubAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "guid",
                    |m: &PubAck| { &m.guid },
                    |m: &mut PubAck| { &mut m.guid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error",
                    |m: &PubAck| { &m.error },
                    |m: &mut PubAck| { &mut m.error },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PubAck>(
                    "PubAck",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PubAck {
        static mut instance: ::protobuf::lazy::Lazy<PubAck> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PubAck,
        };
        unsafe {
            instance.get(PubAck::new)
        }
    }
}

impl ::protobuf::Clear for PubAck {
    fn clear(&mut self) {
        self.clear_guid();
        self.clear_error();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PubAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PubAck {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgProto {
    // message fields
    pub sequence: u64,
    pub subject: ::std::string::String,
    pub reply: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    pub timestamp: i64,
    pub redelivered: bool,
    pub CRC32: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl MsgProto {
    pub fn new() -> MsgProto {
        ::std::default::Default::default()
    }

    // uint64 sequence = 1;

    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }

    // string subject = 2;

    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }

    pub fn get_subject(&self) -> &str {
        &self.subject
    }

    // string reply = 3;

    pub fn clear_reply(&mut self) {
        self.reply.clear();
    }

    // Param is passed by value, moved
    pub fn set_reply(&mut self, v: ::std::string::String) {
        self.reply = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reply(&mut self) -> &mut ::std::string::String {
        &mut self.reply
    }

    // Take field
    pub fn take_reply(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reply, ::std::string::String::new())
    }

    pub fn get_reply(&self) -> &str {
        &self.reply
    }

    // bytes data = 4;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }

    // int64 timestamp = 5;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }

    // bool redelivered = 6;

    pub fn clear_redelivered(&mut self) {
        self.redelivered = false;
    }

    // Param is passed by value, moved
    pub fn set_redelivered(&mut self, v: bool) {
        self.redelivered = v;
    }

    pub fn get_redelivered(&self) -> bool {
        self.redelivered
    }

    // uint32 CRC32 = 10;

    pub fn clear_CRC32(&mut self) {
        self.CRC32 = 0;
    }

    // Param is passed by value, moved
    pub fn set_CRC32(&mut self, v: u32) {
        self.CRC32 = v;
    }

    pub fn get_CRC32(&self) -> u32 {
        self.CRC32
    }
}

impl ::protobuf::Message for MsgProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reply)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.redelivered = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.CRC32 = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.subject);
        }
        if !self.reply.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.reply);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(5, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.redelivered != false {
            my_size += 2;
        }
        if self.CRC32 != 0 {
            my_size += ::protobuf::rt::value_size(10, self.CRC32, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_uint64(1, self.sequence)?;
        }
        if !self.subject.is_empty() {
            os.write_string(2, &self.subject)?;
        }
        if !self.reply.is_empty() {
            os.write_string(3, &self.reply)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        if self.timestamp != 0 {
            os.write_int64(5, self.timestamp)?;
        }
        if self.redelivered != false {
            os.write_bool(6, self.redelivered)?;
        }
        if self.CRC32 != 0 {
            os.write_uint32(10, self.CRC32)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgProto {
        MsgProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sequence",
                    |m: &MsgProto| { &m.sequence },
                    |m: &mut MsgProto| { &mut m.sequence },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "subject",
                    |m: &MsgProto| { &m.subject },
                    |m: &mut MsgProto| { &mut m.subject },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reply",
                    |m: &MsgProto| { &m.reply },
                    |m: &mut MsgProto| { &mut m.reply },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &MsgProto| { &m.data },
                    |m: &mut MsgProto| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "timestamp",
                    |m: &MsgProto| { &m.timestamp },
                    |m: &mut MsgProto| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "redelivered",
                    |m: &MsgProto| { &m.redelivered },
                    |m: &mut MsgProto| { &mut m.redelivered },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "CRC32",
                    |m: &MsgProto| { &m.CRC32 },
                    |m: &mut MsgProto| { &mut m.CRC32 },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MsgProto>(
                    "MsgProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MsgProto {
        static mut instance: ::protobuf::lazy::Lazy<MsgProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MsgProto,
        };
        unsafe {
            instance.get(MsgProto::new)
        }
    }
}

impl ::protobuf::Clear for MsgProto {
    fn clear(&mut self) {
        self.clear_sequence();
        self.clear_subject();
        self.clear_reply();
        self.clear_data();
        self.clear_timestamp();
        self.clear_redelivered();
        self.clear_CRC32();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ack {
    // message fields
    pub subject: ::std::string::String,
    pub sequence: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Ack {
    pub fn new() -> Ack {
        ::std::default::Default::default()
    }

    // string subject = 1;

    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }

    pub fn get_subject(&self) -> &str {
        &self.subject
    }

    // uint64 sequence = 2;

    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
}

impl ::protobuf::Message for Ack {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subject);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.subject.is_empty() {
            os.write_string(1, &self.subject)?;
        }
        if self.sequence != 0 {
            os.write_uint64(2, self.sequence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ack {
        Ack::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "subject",
                    |m: &Ack| { &m.subject },
                    |m: &mut Ack| { &mut m.subject },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sequence",
                    |m: &Ack| { &m.sequence },
                    |m: &mut Ack| { &mut m.sequence },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Ack>(
                    "Ack",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ack {
        static mut instance: ::protobuf::lazy::Lazy<Ack> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Ack,
        };
        unsafe {
            instance.get(Ack::new)
        }
    }
}

impl ::protobuf::Clear for Ack {
    fn clear(&mut self) {
        self.clear_subject();
        self.clear_sequence();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ack {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectRequest {
    // message fields
    pub clientID: ::std::string::String,
    pub heartbeatInbox: ::std::string::String,
    pub protocol: i32,
    pub connID: ::std::vec::Vec<u8>,
    pub pingInterval: i32,
    pub pingMaxOut: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ConnectRequest {
    pub fn new() -> ConnectRequest {
        ::std::default::Default::default()
    }

    // string clientID = 1;

    pub fn clear_clientID(&mut self) {
        self.clientID.clear();
    }

    // Param is passed by value, moved
    pub fn set_clientID(&mut self, v: ::std::string::String) {
        self.clientID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientID(&mut self) -> &mut ::std::string::String {
        &mut self.clientID
    }

    // Take field
    pub fn take_clientID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clientID, ::std::string::String::new())
    }

    pub fn get_clientID(&self) -> &str {
        &self.clientID
    }

    // string heartbeatInbox = 2;

    pub fn clear_heartbeatInbox(&mut self) {
        self.heartbeatInbox.clear();
    }

    // Param is passed by value, moved
    pub fn set_heartbeatInbox(&mut self, v: ::std::string::String) {
        self.heartbeatInbox = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_heartbeatInbox(&mut self) -> &mut ::std::string::String {
        &mut self.heartbeatInbox
    }

    // Take field
    pub fn take_heartbeatInbox(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.heartbeatInbox, ::std::string::String::new())
    }

    pub fn get_heartbeatInbox(&self) -> &str {
        &self.heartbeatInbox
    }

    // int32 protocol = 3;

    pub fn clear_protocol(&mut self) {
        self.protocol = 0;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: i32) {
        self.protocol = v;
    }

    pub fn get_protocol(&self) -> i32 {
        self.protocol
    }

    // bytes connID = 4;

    pub fn clear_connID(&mut self) {
        self.connID.clear();
    }

    // Param is passed by value, moved
    pub fn set_connID(&mut self, v: ::std::vec::Vec<u8>) {
        self.connID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connID(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.connID
    }

    // Take field
    pub fn take_connID(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.connID, ::std::vec::Vec::new())
    }

    pub fn get_connID(&self) -> &[u8] {
        &self.connID
    }

    // int32 pingInterval = 5;

    pub fn clear_pingInterval(&mut self) {
        self.pingInterval = 0;
    }

    // Param is passed by value, moved
    pub fn set_pingInterval(&mut self, v: i32) {
        self.pingInterval = v;
    }

    pub fn get_pingInterval(&self) -> i32 {
        self.pingInterval
    }

    // int32 pingMaxOut = 6;

    pub fn clear_pingMaxOut(&mut self) {
        self.pingMaxOut = 0;
    }

    // Param is passed by value, moved
    pub fn set_pingMaxOut(&mut self, v: i32) {
        self.pingMaxOut = v;
    }

    pub fn get_pingMaxOut(&self) -> i32 {
        self.pingMaxOut
    }
}

impl ::protobuf::Message for ConnectRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clientID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.heartbeatInbox)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.protocol = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.connID)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.pingInterval = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.pingMaxOut = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.clientID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.clientID);
        }
        if !self.heartbeatInbox.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.heartbeatInbox);
        }
        if self.protocol != 0 {
            my_size += ::protobuf::rt::value_size(3, self.protocol, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.connID.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.connID);
        }
        if self.pingInterval != 0 {
            my_size += ::protobuf::rt::value_size(5, self.pingInterval, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pingMaxOut != 0 {
            my_size += ::protobuf::rt::value_size(6, self.pingMaxOut, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.clientID.is_empty() {
            os.write_string(1, &self.clientID)?;
        }
        if !self.heartbeatInbox.is_empty() {
            os.write_string(2, &self.heartbeatInbox)?;
        }
        if self.protocol != 0 {
            os.write_int32(3, self.protocol)?;
        }
        if !self.connID.is_empty() {
            os.write_bytes(4, &self.connID)?;
        }
        if self.pingInterval != 0 {
            os.write_int32(5, self.pingInterval)?;
        }
        if self.pingMaxOut != 0 {
            os.write_int32(6, self.pingMaxOut)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectRequest {
        ConnectRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clientID",
                    |m: &ConnectRequest| { &m.clientID },
                    |m: &mut ConnectRequest| { &mut m.clientID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "heartbeatInbox",
                    |m: &ConnectRequest| { &m.heartbeatInbox },
                    |m: &mut ConnectRequest| { &mut m.heartbeatInbox },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "protocol",
                    |m: &ConnectRequest| { &m.protocol },
                    |m: &mut ConnectRequest| { &mut m.protocol },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "connID",
                    |m: &ConnectRequest| { &m.connID },
                    |m: &mut ConnectRequest| { &mut m.connID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "pingInterval",
                    |m: &ConnectRequest| { &m.pingInterval },
                    |m: &mut ConnectRequest| { &mut m.pingInterval },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "pingMaxOut",
                    |m: &ConnectRequest| { &m.pingMaxOut },
                    |m: &mut ConnectRequest| { &mut m.pingMaxOut },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConnectRequest>(
                    "ConnectRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConnectRequest {
        static mut instance: ::protobuf::lazy::Lazy<ConnectRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConnectRequest,
        };
        unsafe {
            instance.get(ConnectRequest::new)
        }
    }
}

impl ::protobuf::Clear for ConnectRequest {
    fn clear(&mut self) {
        self.clear_clientID();
        self.clear_heartbeatInbox();
        self.clear_protocol();
        self.clear_connID();
        self.clear_pingInterval();
        self.clear_pingMaxOut();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectResponse {
    // message fields
    pub pubPrefix: ::std::string::String,
    pub subRequests: ::std::string::String,
    pub unsubRequests: ::std::string::String,
    pub closeRequests: ::std::string::String,
    pub error: ::std::string::String,
    pub subCloseRequests: ::std::string::String,
    pub pingRequests: ::std::string::String,
    pub pingInterval: i32,
    pub pingMaxOut: i32,
    pub protocol: i32,
    pub publicKey: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ConnectResponse {
    pub fn new() -> ConnectResponse {
        ::std::default::Default::default()
    }

    // string pubPrefix = 1;

    pub fn clear_pubPrefix(&mut self) {
        self.pubPrefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubPrefix(&mut self, v: ::std::string::String) {
        self.pubPrefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubPrefix(&mut self) -> &mut ::std::string::String {
        &mut self.pubPrefix
    }

    // Take field
    pub fn take_pubPrefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubPrefix, ::std::string::String::new())
    }

    pub fn get_pubPrefix(&self) -> &str {
        &self.pubPrefix
    }

    // string subRequests = 2;

    pub fn clear_subRequests(&mut self) {
        self.subRequests.clear();
    }

    // Param is passed by value, moved
    pub fn set_subRequests(&mut self, v: ::std::string::String) {
        self.subRequests = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subRequests(&mut self) -> &mut ::std::string::String {
        &mut self.subRequests
    }

    // Take field
    pub fn take_subRequests(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subRequests, ::std::string::String::new())
    }

    pub fn get_subRequests(&self) -> &str {
        &self.subRequests
    }

    // string unsubRequests = 3;

    pub fn clear_unsubRequests(&mut self) {
        self.unsubRequests.clear();
    }

    // Param is passed by value, moved
    pub fn set_unsubRequests(&mut self, v: ::std::string::String) {
        self.unsubRequests = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unsubRequests(&mut self) -> &mut ::std::string::String {
        &mut self.unsubRequests
    }

    // Take field
    pub fn take_unsubRequests(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unsubRequests, ::std::string::String::new())
    }

    pub fn get_unsubRequests(&self) -> &str {
        &self.unsubRequests
    }

    // string closeRequests = 4;

    pub fn clear_closeRequests(&mut self) {
        self.closeRequests.clear();
    }

    // Param is passed by value, moved
    pub fn set_closeRequests(&mut self, v: ::std::string::String) {
        self.closeRequests = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_closeRequests(&mut self) -> &mut ::std::string::String {
        &mut self.closeRequests
    }

    // Take field
    pub fn take_closeRequests(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.closeRequests, ::std::string::String::new())
    }

    pub fn get_closeRequests(&self) -> &str {
        &self.closeRequests
    }

    // string error = 5;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }

    pub fn get_error(&self) -> &str {
        &self.error
    }

    // string subCloseRequests = 6;

    pub fn clear_subCloseRequests(&mut self) {
        self.subCloseRequests.clear();
    }

    // Param is passed by value, moved
    pub fn set_subCloseRequests(&mut self, v: ::std::string::String) {
        self.subCloseRequests = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subCloseRequests(&mut self) -> &mut ::std::string::String {
        &mut self.subCloseRequests
    }

    // Take field
    pub fn take_subCloseRequests(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subCloseRequests, ::std::string::String::new())
    }

    pub fn get_subCloseRequests(&self) -> &str {
        &self.subCloseRequests
    }

    // string pingRequests = 7;

    pub fn clear_pingRequests(&mut self) {
        self.pingRequests.clear();
    }

    // Param is passed by value, moved
    pub fn set_pingRequests(&mut self, v: ::std::string::String) {
        self.pingRequests = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pingRequests(&mut self) -> &mut ::std::string::String {
        &mut self.pingRequests
    }

    // Take field
    pub fn take_pingRequests(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pingRequests, ::std::string::String::new())
    }

    pub fn get_pingRequests(&self) -> &str {
        &self.pingRequests
    }

    // int32 pingInterval = 8;

    pub fn clear_pingInterval(&mut self) {
        self.pingInterval = 0;
    }

    // Param is passed by value, moved
    pub fn set_pingInterval(&mut self, v: i32) {
        self.pingInterval = v;
    }

    pub fn get_pingInterval(&self) -> i32 {
        self.pingInterval
    }

    // int32 pingMaxOut = 9;

    pub fn clear_pingMaxOut(&mut self) {
        self.pingMaxOut = 0;
    }

    // Param is passed by value, moved
    pub fn set_pingMaxOut(&mut self, v: i32) {
        self.pingMaxOut = v;
    }

    pub fn get_pingMaxOut(&self) -> i32 {
        self.pingMaxOut
    }

    // int32 protocol = 10;

    pub fn clear_protocol(&mut self) {
        self.protocol = 0;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: i32) {
        self.protocol = v;
    }

    pub fn get_protocol(&self) -> i32 {
        self.protocol
    }

    // string publicKey = 100;

    pub fn clear_publicKey(&mut self) {
        self.publicKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_publicKey(&mut self, v: ::std::string::String) {
        self.publicKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_publicKey(&mut self) -> &mut ::std::string::String {
        &mut self.publicKey
    }

    // Take field
    pub fn take_publicKey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.publicKey, ::std::string::String::new())
    }

    pub fn get_publicKey(&self) -> &str {
        &self.publicKey
    }
}

impl ::protobuf::Message for ConnectResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubPrefix)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subRequests)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unsubRequests)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.closeRequests)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subCloseRequests)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pingRequests)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.pingInterval = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.pingMaxOut = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.protocol = tmp;
                },
                100 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.publicKey)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pubPrefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pubPrefix);
        }
        if !self.subRequests.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.subRequests);
        }
        if !self.unsubRequests.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.unsubRequests);
        }
        if !self.closeRequests.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.closeRequests);
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.error);
        }
        if !self.subCloseRequests.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.subCloseRequests);
        }
        if !self.pingRequests.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.pingRequests);
        }
        if self.pingInterval != 0 {
            my_size += ::protobuf::rt::value_size(8, self.pingInterval, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pingMaxOut != 0 {
            my_size += ::protobuf::rt::value_size(9, self.pingMaxOut, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.protocol != 0 {
            my_size += ::protobuf::rt::value_size(10, self.protocol, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.publicKey.is_empty() {
            my_size += ::protobuf::rt::string_size(100, &self.publicKey);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.pubPrefix.is_empty() {
            os.write_string(1, &self.pubPrefix)?;
        }
        if !self.subRequests.is_empty() {
            os.write_string(2, &self.subRequests)?;
        }
        if !self.unsubRequests.is_empty() {
            os.write_string(3, &self.unsubRequests)?;
        }
        if !self.closeRequests.is_empty() {
            os.write_string(4, &self.closeRequests)?;
        }
        if !self.error.is_empty() {
            os.write_string(5, &self.error)?;
        }
        if !self.subCloseRequests.is_empty() {
            os.write_string(6, &self.subCloseRequests)?;
        }
        if !self.pingRequests.is_empty() {
            os.write_string(7, &self.pingRequests)?;
        }
        if self.pingInterval != 0 {
            os.write_int32(8, self.pingInterval)?;
        }
        if self.pingMaxOut != 0 {
            os.write_int32(9, self.pingMaxOut)?;
        }
        if self.protocol != 0 {
            os.write_int32(10, self.protocol)?;
        }
        if !self.publicKey.is_empty() {
            os.write_string(100, &self.publicKey)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectResponse {
        ConnectResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pubPrefix",
                    |m: &ConnectResponse| { &m.pubPrefix },
                    |m: &mut ConnectResponse| { &mut m.pubPrefix },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "subRequests",
                    |m: &ConnectResponse| { &m.subRequests },
                    |m: &mut ConnectResponse| { &mut m.subRequests },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "unsubRequests",
                    |m: &ConnectResponse| { &m.unsubRequests },
                    |m: &mut ConnectResponse| { &mut m.unsubRequests },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "closeRequests",
                    |m: &ConnectResponse| { &m.closeRequests },
                    |m: &mut ConnectResponse| { &mut m.closeRequests },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error",
                    |m: &ConnectResponse| { &m.error },
                    |m: &mut ConnectResponse| { &mut m.error },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "subCloseRequests",
                    |m: &ConnectResponse| { &m.subCloseRequests },
                    |m: &mut ConnectResponse| { &mut m.subCloseRequests },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "pingRequests",
                    |m: &ConnectResponse| { &m.pingRequests },
                    |m: &mut ConnectResponse| { &mut m.pingRequests },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "pingInterval",
                    |m: &ConnectResponse| { &m.pingInterval },
                    |m: &mut ConnectResponse| { &mut m.pingInterval },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "pingMaxOut",
                    |m: &ConnectResponse| { &m.pingMaxOut },
                    |m: &mut ConnectResponse| { &mut m.pingMaxOut },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "protocol",
                    |m: &ConnectResponse| { &m.protocol },
                    |m: &mut ConnectResponse| { &mut m.protocol },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "publicKey",
                    |m: &ConnectResponse| { &m.publicKey },
                    |m: &mut ConnectResponse| { &mut m.publicKey },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConnectResponse>(
                    "ConnectResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConnectResponse {
        static mut instance: ::protobuf::lazy::Lazy<ConnectResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConnectResponse,
        };
        unsafe {
            instance.get(ConnectResponse::new)
        }
    }
}

impl ::protobuf::Clear for ConnectResponse {
    fn clear(&mut self) {
        self.clear_pubPrefix();
        self.clear_subRequests();
        self.clear_unsubRequests();
        self.clear_closeRequests();
        self.clear_error();
        self.clear_subCloseRequests();
        self.clear_pingRequests();
        self.clear_pingInterval();
        self.clear_pingMaxOut();
        self.clear_protocol();
        self.clear_publicKey();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ping {
    // message fields
    pub connID: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Ping {
    pub fn new() -> Ping {
        ::std::default::Default::default()
    }

    // bytes connID = 1;

    pub fn clear_connID(&mut self) {
        self.connID.clear();
    }

    // Param is passed by value, moved
    pub fn set_connID(&mut self, v: ::std::vec::Vec<u8>) {
        self.connID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connID(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.connID
    }

    // Take field
    pub fn take_connID(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.connID, ::std::vec::Vec::new())
    }

    pub fn get_connID(&self) -> &[u8] {
        &self.connID
    }
}

impl ::protobuf::Message for Ping {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.connID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.connID.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.connID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.connID.is_empty() {
            os.write_bytes(1, &self.connID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ping {
        Ping::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "connID",
                    |m: &Ping| { &m.connID },
                    |m: &mut Ping| { &mut m.connID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Ping>(
                    "Ping",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Ping {
        static mut instance: ::protobuf::lazy::Lazy<Ping> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Ping,
        };
        unsafe {
            instance.get(Ping::new)
        }
    }
}

impl ::protobuf::Clear for Ping {
    fn clear(&mut self) {
        self.clear_connID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ping {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PingResponse {
    // message fields
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PingResponse {
    pub fn new() -> PingResponse {
        ::std::default::Default::default()
    }

    // string error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }

    pub fn get_error(&self) -> &str {
        &self.error
    }
}

impl ::protobuf::Message for PingResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.error.is_empty() {
            os.write_string(1, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PingResponse {
        PingResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error",
                    |m: &PingResponse| { &m.error },
                    |m: &mut PingResponse| { &mut m.error },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PingResponse>(
                    "PingResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PingResponse {
        static mut instance: ::protobuf::lazy::Lazy<PingResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PingResponse,
        };
        unsafe {
            instance.get(PingResponse::new)
        }
    }
}

impl ::protobuf::Clear for PingResponse {
    fn clear(&mut self) {
        self.clear_error();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PingResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscriptionRequest {
    // message fields
    pub clientID: ::std::string::String,
    pub subject: ::std::string::String,
    pub qGroup: ::std::string::String,
    pub inbox: ::std::string::String,
    pub maxInFlight: i32,
    pub ackWaitInSecs: i32,
    pub durableName: ::std::string::String,
    pub startPosition: StartPosition,
    pub startSequence: u64,
    pub startTimeDelta: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl SubscriptionRequest {
    pub fn new() -> SubscriptionRequest {
        ::std::default::Default::default()
    }

    // string clientID = 1;

    pub fn clear_clientID(&mut self) {
        self.clientID.clear();
    }

    // Param is passed by value, moved
    pub fn set_clientID(&mut self, v: ::std::string::String) {
        self.clientID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientID(&mut self) -> &mut ::std::string::String {
        &mut self.clientID
    }

    // Take field
    pub fn take_clientID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clientID, ::std::string::String::new())
    }

    pub fn get_clientID(&self) -> &str {
        &self.clientID
    }

    // string subject = 2;

    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }

    pub fn get_subject(&self) -> &str {
        &self.subject
    }

    // string qGroup = 3;

    pub fn clear_qGroup(&mut self) {
        self.qGroup.clear();
    }

    // Param is passed by value, moved
    pub fn set_qGroup(&mut self, v: ::std::string::String) {
        self.qGroup = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_qGroup(&mut self) -> &mut ::std::string::String {
        &mut self.qGroup
    }

    // Take field
    pub fn take_qGroup(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.qGroup, ::std::string::String::new())
    }

    pub fn get_qGroup(&self) -> &str {
        &self.qGroup
    }

    // string inbox = 4;

    pub fn clear_inbox(&mut self) {
        self.inbox.clear();
    }

    // Param is passed by value, moved
    pub fn set_inbox(&mut self, v: ::std::string::String) {
        self.inbox = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inbox(&mut self) -> &mut ::std::string::String {
        &mut self.inbox
    }

    // Take field
    pub fn take_inbox(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inbox, ::std::string::String::new())
    }

    pub fn get_inbox(&self) -> &str {
        &self.inbox
    }

    // int32 maxInFlight = 5;

    pub fn clear_maxInFlight(&mut self) {
        self.maxInFlight = 0;
    }

    // Param is passed by value, moved
    pub fn set_maxInFlight(&mut self, v: i32) {
        self.maxInFlight = v;
    }

    pub fn get_maxInFlight(&self) -> i32 {
        self.maxInFlight
    }

    // int32 ackWaitInSecs = 6;

    pub fn clear_ackWaitInSecs(&mut self) {
        self.ackWaitInSecs = 0;
    }

    // Param is passed by value, moved
    pub fn set_ackWaitInSecs(&mut self, v: i32) {
        self.ackWaitInSecs = v;
    }

    pub fn get_ackWaitInSecs(&self) -> i32 {
        self.ackWaitInSecs
    }

    // string durableName = 7;

    pub fn clear_durableName(&mut self) {
        self.durableName.clear();
    }

    // Param is passed by value, moved
    pub fn set_durableName(&mut self, v: ::std::string::String) {
        self.durableName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_durableName(&mut self) -> &mut ::std::string::String {
        &mut self.durableName
    }

    // Take field
    pub fn take_durableName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.durableName, ::std::string::String::new())
    }

    pub fn get_durableName(&self) -> &str {
        &self.durableName
    }

    // .pb.StartPosition startPosition = 10;

    pub fn clear_startPosition(&mut self) {
        self.startPosition = StartPosition::NewOnly;
    }

    // Param is passed by value, moved
    pub fn set_startPosition(&mut self, v: StartPosition) {
        self.startPosition = v;
    }

    pub fn get_startPosition(&self) -> StartPosition {
        self.startPosition
    }

    // uint64 startSequence = 11;

    pub fn clear_startSequence(&mut self) {
        self.startSequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_startSequence(&mut self, v: u64) {
        self.startSequence = v;
    }

    pub fn get_startSequence(&self) -> u64 {
        self.startSequence
    }

    // int64 startTimeDelta = 12;

    pub fn clear_startTimeDelta(&mut self) {
        self.startTimeDelta = 0;
    }

    // Param is passed by value, moved
    pub fn set_startTimeDelta(&mut self, v: i64) {
        self.startTimeDelta = v;
    }

    pub fn get_startTimeDelta(&self) -> i64 {
        self.startTimeDelta
    }
}

impl ::protobuf::Message for SubscriptionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clientID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.qGroup)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inbox)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.maxInFlight = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.ackWaitInSecs = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.durableName)?;
                },
                10 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.startPosition, 10, &mut self.unknown_fields)?
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.startSequence = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.startTimeDelta = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.clientID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.clientID);
        }
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.subject);
        }
        if !self.qGroup.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.qGroup);
        }
        if !self.inbox.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.inbox);
        }
        if self.maxInFlight != 0 {
            my_size += ::protobuf::rt::value_size(5, self.maxInFlight, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ackWaitInSecs != 0 {
            my_size += ::protobuf::rt::value_size(6, self.ackWaitInSecs, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.durableName.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.durableName);
        }
        if self.startPosition != StartPosition::NewOnly {
            my_size += ::protobuf::rt::enum_size(10, self.startPosition);
        }
        if self.startSequence != 0 {
            my_size += ::protobuf::rt::value_size(11, self.startSequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.startTimeDelta != 0 {
            my_size += ::protobuf::rt::value_size(12, self.startTimeDelta, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.clientID.is_empty() {
            os.write_string(1, &self.clientID)?;
        }
        if !self.subject.is_empty() {
            os.write_string(2, &self.subject)?;
        }
        if !self.qGroup.is_empty() {
            os.write_string(3, &self.qGroup)?;
        }
        if !self.inbox.is_empty() {
            os.write_string(4, &self.inbox)?;
        }
        if self.maxInFlight != 0 {
            os.write_int32(5, self.maxInFlight)?;
        }
        if self.ackWaitInSecs != 0 {
            os.write_int32(6, self.ackWaitInSecs)?;
        }
        if !self.durableName.is_empty() {
            os.write_string(7, &self.durableName)?;
        }
        if self.startPosition != StartPosition::NewOnly {
            os.write_enum(10, self.startPosition.value())?;
        }
        if self.startSequence != 0 {
            os.write_uint64(11, self.startSequence)?;
        }
        if self.startTimeDelta != 0 {
            os.write_int64(12, self.startTimeDelta)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscriptionRequest {
        SubscriptionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clientID",
                    |m: &SubscriptionRequest| { &m.clientID },
                    |m: &mut SubscriptionRequest| { &mut m.clientID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "subject",
                    |m: &SubscriptionRequest| { &m.subject },
                    |m: &mut SubscriptionRequest| { &mut m.subject },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "qGroup",
                    |m: &SubscriptionRequest| { &m.qGroup },
                    |m: &mut SubscriptionRequest| { &mut m.qGroup },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "inbox",
                    |m: &SubscriptionRequest| { &m.inbox },
                    |m: &mut SubscriptionRequest| { &mut m.inbox },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "maxInFlight",
                    |m: &SubscriptionRequest| { &m.maxInFlight },
                    |m: &mut SubscriptionRequest| { &mut m.maxInFlight },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "ackWaitInSecs",
                    |m: &SubscriptionRequest| { &m.ackWaitInSecs },
                    |m: &mut SubscriptionRequest| { &mut m.ackWaitInSecs },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "durableName",
                    |m: &SubscriptionRequest| { &m.durableName },
                    |m: &mut SubscriptionRequest| { &mut m.durableName },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<StartPosition>>(
                    "startPosition",
                    |m: &SubscriptionRequest| { &m.startPosition },
                    |m: &mut SubscriptionRequest| { &mut m.startPosition },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "startSequence",
                    |m: &SubscriptionRequest| { &m.startSequence },
                    |m: &mut SubscriptionRequest| { &mut m.startSequence },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "startTimeDelta",
                    |m: &SubscriptionRequest| { &m.startTimeDelta },
                    |m: &mut SubscriptionRequest| { &mut m.startTimeDelta },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SubscriptionRequest>(
                    "SubscriptionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SubscriptionRequest {
        static mut instance: ::protobuf::lazy::Lazy<SubscriptionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SubscriptionRequest,
        };
        unsafe {
            instance.get(SubscriptionRequest::new)
        }
    }
}

impl ::protobuf::Clear for SubscriptionRequest {
    fn clear(&mut self) {
        self.clear_clientID();
        self.clear_subject();
        self.clear_qGroup();
        self.clear_inbox();
        self.clear_maxInFlight();
        self.clear_ackWaitInSecs();
        self.clear_durableName();
        self.clear_startPosition();
        self.clear_startSequence();
        self.clear_startTimeDelta();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscriptionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscriptionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscriptionResponse {
    // message fields
    pub ackInbox: ::std::string::String,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl SubscriptionResponse {
    pub fn new() -> SubscriptionResponse {
        ::std::default::Default::default()
    }

    // string ackInbox = 2;

    pub fn clear_ackInbox(&mut self) {
        self.ackInbox.clear();
    }

    // Param is passed by value, moved
    pub fn set_ackInbox(&mut self, v: ::std::string::String) {
        self.ackInbox = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ackInbox(&mut self) -> &mut ::std::string::String {
        &mut self.ackInbox
    }

    // Take field
    pub fn take_ackInbox(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ackInbox, ::std::string::String::new())
    }

    pub fn get_ackInbox(&self) -> &str {
        &self.ackInbox
    }

    // string error = 3;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }

    pub fn get_error(&self) -> &str {
        &self.error
    }
}

impl ::protobuf::Message for SubscriptionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ackInbox)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ackInbox.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ackInbox);
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.ackInbox.is_empty() {
            os.write_string(2, &self.ackInbox)?;
        }
        if !self.error.is_empty() {
            os.write_string(3, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscriptionResponse {
        SubscriptionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ackInbox",
                    |m: &SubscriptionResponse| { &m.ackInbox },
                    |m: &mut SubscriptionResponse| { &mut m.ackInbox },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error",
                    |m: &SubscriptionResponse| { &m.error },
                    |m: &mut SubscriptionResponse| { &mut m.error },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SubscriptionResponse>(
                    "SubscriptionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SubscriptionResponse {
        static mut instance: ::protobuf::lazy::Lazy<SubscriptionResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SubscriptionResponse,
        };
        unsafe {
            instance.get(SubscriptionResponse::new)
        }
    }
}

impl ::protobuf::Clear for SubscriptionResponse {
    fn clear(&mut self) {
        self.clear_ackInbox();
        self.clear_error();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscriptionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscriptionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UnsubscribeRequest {
    // message fields
    pub clientID: ::std::string::String,
    pub subject: ::std::string::String,
    pub inbox: ::std::string::String,
    pub durableName: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl UnsubscribeRequest {
    pub fn new() -> UnsubscribeRequest {
        ::std::default::Default::default()
    }

    // string clientID = 1;

    pub fn clear_clientID(&mut self) {
        self.clientID.clear();
    }

    // Param is passed by value, moved
    pub fn set_clientID(&mut self, v: ::std::string::String) {
        self.clientID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientID(&mut self) -> &mut ::std::string::String {
        &mut self.clientID
    }

    // Take field
    pub fn take_clientID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clientID, ::std::string::String::new())
    }

    pub fn get_clientID(&self) -> &str {
        &self.clientID
    }

    // string subject = 2;

    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }

    pub fn get_subject(&self) -> &str {
        &self.subject
    }

    // string inbox = 3;

    pub fn clear_inbox(&mut self) {
        self.inbox.clear();
    }

    // Param is passed by value, moved
    pub fn set_inbox(&mut self, v: ::std::string::String) {
        self.inbox = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inbox(&mut self) -> &mut ::std::string::String {
        &mut self.inbox
    }

    // Take field
    pub fn take_inbox(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inbox, ::std::string::String::new())
    }

    pub fn get_inbox(&self) -> &str {
        &self.inbox
    }

    // string durableName = 4;

    pub fn clear_durableName(&mut self) {
        self.durableName.clear();
    }

    // Param is passed by value, moved
    pub fn set_durableName(&mut self, v: ::std::string::String) {
        self.durableName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_durableName(&mut self) -> &mut ::std::string::String {
        &mut self.durableName
    }

    // Take field
    pub fn take_durableName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.durableName, ::std::string::String::new())
    }

    pub fn get_durableName(&self) -> &str {
        &self.durableName
    }
}

impl ::protobuf::Message for UnsubscribeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clientID)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inbox)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.durableName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.clientID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.clientID);
        }
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.subject);
        }
        if !self.inbox.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.inbox);
        }
        if !self.durableName.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.durableName);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.clientID.is_empty() {
            os.write_string(1, &self.clientID)?;
        }
        if !self.subject.is_empty() {
            os.write_string(2, &self.subject)?;
        }
        if !self.inbox.is_empty() {
            os.write_string(3, &self.inbox)?;
        }
        if !self.durableName.is_empty() {
            os.write_string(4, &self.durableName)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnsubscribeRequest {
        UnsubscribeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clientID",
                    |m: &UnsubscribeRequest| { &m.clientID },
                    |m: &mut UnsubscribeRequest| { &mut m.clientID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "subject",
                    |m: &UnsubscribeRequest| { &m.subject },
                    |m: &mut UnsubscribeRequest| { &mut m.subject },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "inbox",
                    |m: &UnsubscribeRequest| { &m.inbox },
                    |m: &mut UnsubscribeRequest| { &mut m.inbox },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "durableName",
                    |m: &UnsubscribeRequest| { &m.durableName },
                    |m: &mut UnsubscribeRequest| { &mut m.durableName },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UnsubscribeRequest>(
                    "UnsubscribeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UnsubscribeRequest {
        static mut instance: ::protobuf::lazy::Lazy<UnsubscribeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UnsubscribeRequest,
        };
        unsafe {
            instance.get(UnsubscribeRequest::new)
        }
    }
}

impl ::protobuf::Clear for UnsubscribeRequest {
    fn clear(&mut self) {
        self.clear_clientID();
        self.clear_subject();
        self.clear_inbox();
        self.clear_durableName();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnsubscribeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnsubscribeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloseRequest {
    // message fields
    pub clientID: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CloseRequest {
    pub fn new() -> CloseRequest {
        ::std::default::Default::default()
    }

    // string clientID = 1;

    pub fn clear_clientID(&mut self) {
        self.clientID.clear();
    }

    // Param is passed by value, moved
    pub fn set_clientID(&mut self, v: ::std::string::String) {
        self.clientID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientID(&mut self) -> &mut ::std::string::String {
        &mut self.clientID
    }

    // Take field
    pub fn take_clientID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clientID, ::std::string::String::new())
    }

    pub fn get_clientID(&self) -> &str {
        &self.clientID
    }
}

impl ::protobuf::Message for CloseRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clientID)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.clientID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.clientID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.clientID.is_empty() {
            os.write_string(1, &self.clientID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloseRequest {
        CloseRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "clientID",
                    |m: &CloseRequest| { &m.clientID },
                    |m: &mut CloseRequest| { &mut m.clientID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CloseRequest>(
                    "CloseRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CloseRequest {
        static mut instance: ::protobuf::lazy::Lazy<CloseRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CloseRequest,
        };
        unsafe {
            instance.get(CloseRequest::new)
        }
    }
}

impl ::protobuf::Clear for CloseRequest {
    fn clear(&mut self) {
        self.clear_clientID();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloseRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloseRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloseResponse {
    // message fields
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CloseResponse {
    pub fn new() -> CloseResponse {
        ::std::default::Default::default()
    }

    // string error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }

    pub fn get_error(&self) -> &str {
        &self.error
    }
}

impl ::protobuf::Message for CloseResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.error.is_empty() {
            os.write_string(1, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> & dyn ::std::any::Any {
        self as & dyn ::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut  dyn ::std::any::Any {
        self as &mut  dyn ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box< dyn ::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloseResponse {
        CloseResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error",
                    |m: &CloseResponse| { &m.error },
                    |m: &mut CloseResponse| { &mut m.error },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CloseResponse>(
                    "CloseResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CloseResponse {
        static mut instance: ::protobuf::lazy::Lazy<CloseResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CloseResponse,
        };
        unsafe {
            instance.get(CloseResponse::new)
        }
    }
}

impl ::protobuf::Clear for CloseResponse {
    fn clear(&mut self) {
        self.clear_error();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloseResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloseResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum StartPosition {
    NewOnly = 0,
    LastReceived = 1,
    TimeDeltaStart = 2,
    SequenceStart = 3,
    First = 4,
}

impl ::protobuf::ProtobufEnum for StartPosition {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<StartPosition> {
        match value {
            0 => ::std::option::Option::Some(StartPosition::NewOnly),
            1 => ::std::option::Option::Some(StartPosition::LastReceived),
            2 => ::std::option::Option::Some(StartPosition::TimeDeltaStart),
            3 => ::std::option::Option::Some(StartPosition::SequenceStart),
            4 => ::std::option::Option::Some(StartPosition::First),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [StartPosition] = &[
            StartPosition::NewOnly,
            StartPosition::LastReceived,
            StartPosition::TimeDeltaStart,
            StartPosition::SequenceStart,
            StartPosition::First,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("StartPosition", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for StartPosition {
}

impl ::std::default::Default for StartPosition {
    fn default() -> Self {
        StartPosition::NewOnly
    }
}

impl ::protobuf::reflect::ProtobufValue for StartPosition {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eprotocol.proto\x12\x02pb\"\xac\x01\n\x06PubMsg\x12\x1a\n\x08client\
    ID\x18\x01\x20\x01(\tR\x08clientID\x12\x12\n\x04guid\x18\x02\x20\x01(\tR\
    \x04guid\x12\x18\n\x07subject\x18\x03\x20\x01(\tR\x07subject\x12\x14\n\
    \x05reply\x18\x04\x20\x01(\tR\x05reply\x12\x12\n\x04data\x18\x05\x20\x01\
    (\x0cR\x04data\x12\x16\n\x06connID\x18\x06\x20\x01(\x0cR\x06connID\x12\
    \x16\n\x06sha256\x18\n\x20\x01(\x0cR\x06sha256\"2\n\x06PubAck\x12\x12\n\
    \x04guid\x18\x01\x20\x01(\tR\x04guid\x12\x14\n\x05error\x18\x02\x20\x01(\
    \tR\x05error\"\xc0\x01\n\x08MsgProto\x12\x1a\n\x08sequence\x18\x01\x20\
    \x01(\x04R\x08sequence\x12\x18\n\x07subject\x18\x02\x20\x01(\tR\x07subje\
    ct\x12\x14\n\x05reply\x18\x03\x20\x01(\tR\x05reply\x12\x12\n\x04data\x18\
    \x04\x20\x01(\x0cR\x04data\x12\x1c\n\ttimestamp\x18\x05\x20\x01(\x03R\tt\
    imestamp\x12\x20\n\x0bredelivered\x18\x06\x20\x01(\x08R\x0bredelivered\
    \x12\x14\n\x05CRC32\x18\n\x20\x01(\rR\x05CRC32\";\n\x03Ack\x12\x18\n\x07\
    subject\x18\x01\x20\x01(\tR\x07subject\x12\x1a\n\x08sequence\x18\x02\x20\
    \x01(\x04R\x08sequence\"\xcc\x01\n\x0eConnectRequest\x12\x1a\n\x08client\
    ID\x18\x01\x20\x01(\tR\x08clientID\x12&\n\x0eheartbeatInbox\x18\x02\x20\
    \x01(\tR\x0eheartbeatInbox\x12\x1a\n\x08protocol\x18\x03\x20\x01(\x05R\
    \x08protocol\x12\x16\n\x06connID\x18\x04\x20\x01(\x0cR\x06connID\x12\"\n\
    \x0cpingInterval\x18\x05\x20\x01(\x05R\x0cpingInterval\x12\x1e\n\npingMa\
    xOut\x18\x06\x20\x01(\x05R\npingMaxOut\"\x81\x03\n\x0fConnectResponse\
    \x12\x1c\n\tpubPrefix\x18\x01\x20\x01(\tR\tpubPrefix\x12\x20\n\x0bsubReq\
    uests\x18\x02\x20\x01(\tR\x0bsubRequests\x12$\n\runsubRequests\x18\x03\
    \x20\x01(\tR\runsubRequests\x12$\n\rcloseRequests\x18\x04\x20\x01(\tR\rc\
    loseRequests\x12\x14\n\x05error\x18\x05\x20\x01(\tR\x05error\x12*\n\x10s\
    ubCloseRequests\x18\x06\x20\x01(\tR\x10subCloseRequests\x12\"\n\x0cpingR\
    equests\x18\x07\x20\x01(\tR\x0cpingRequests\x12\"\n\x0cpingInterval\x18\
    \x08\x20\x01(\x05R\x0cpingInterval\x12\x1e\n\npingMaxOut\x18\t\x20\x01(\
    \x05R\npingMaxOut\x12\x1a\n\x08protocol\x18\n\x20\x01(\x05R\x08protocol\
    \x12\x1c\n\tpublicKey\x18d\x20\x01(\tR\tpublicKey\"\x1e\n\x04Ping\x12\
    \x16\n\x06connID\x18\x01\x20\x01(\x0cR\x06connID\"$\n\x0cPingResponse\
    \x12\x14\n\x05error\x18\x01\x20\x01(\tR\x05error\"\xea\x02\n\x13Subscrip\
    tionRequest\x12\x1a\n\x08clientID\x18\x01\x20\x01(\tR\x08clientID\x12\
    \x18\n\x07subject\x18\x02\x20\x01(\tR\x07subject\x12\x16\n\x06qGroup\x18\
    \x03\x20\x01(\tR\x06qGroup\x12\x14\n\x05inbox\x18\x04\x20\x01(\tR\x05inb\
    ox\x12\x20\n\x0bmaxInFlight\x18\x05\x20\x01(\x05R\x0bmaxInFlight\x12$\n\
    \rackWaitInSecs\x18\x06\x20\x01(\x05R\rackWaitInSecs\x12\x20\n\x0bdurabl\
    eName\x18\x07\x20\x01(\tR\x0bdurableName\x127\n\rstartPosition\x18\n\x20\
    \x01(\x0e2\x11.pb.StartPositionR\rstartPosition\x12$\n\rstartSequence\
    \x18\x0b\x20\x01(\x04R\rstartSequence\x12&\n\x0estartTimeDelta\x18\x0c\
    \x20\x01(\x03R\x0estartTimeDelta\"H\n\x14SubscriptionResponse\x12\x1a\n\
    \x08ackInbox\x18\x02\x20\x01(\tR\x08ackInbox\x12\x14\n\x05error\x18\x03\
    \x20\x01(\tR\x05error\"\x82\x01\n\x12UnsubscribeRequest\x12\x1a\n\x08cli\
    entID\x18\x01\x20\x01(\tR\x08clientID\x12\x18\n\x07subject\x18\x02\x20\
    \x01(\tR\x07subject\x12\x14\n\x05inbox\x18\x03\x20\x01(\tR\x05inbox\x12\
    \x20\n\x0bdurableName\x18\x04\x20\x01(\tR\x0bdurableName\"*\n\x0cCloseRe\
    quest\x12\x1a\n\x08clientID\x18\x01\x20\x01(\tR\x08clientID\"%\n\rCloseR\
    esponse\x12\x14\n\x05error\x18\x01\x20\x01(\tR\x05error*`\n\rStartPositi\
    on\x12\x0b\n\x07NewOnly\x10\0\x12\x10\n\x0cLastReceived\x10\x01\x12\x12\
    \n\x0eTimeDeltaStart\x10\x02\x12\x11\n\rSequenceStart\x10\x03\x12\t\n\
    \x05First\x10\x04J\xb5=\n\x07\x12\x05\x10\0\x89\x01\x01\n\xb8\x05\n\x01\
    \x0c\x12\x03\x10\0\x122\xad\x05\x20Copyright\x202016-2018\x20The\x20NATS\
    \x20Authors\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Versi\
    on\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20Y\
    ou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20ht\
    tp://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\
    \x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CON\
    DITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\
    \x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20gover\
    ning\x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\
    \n\n\x20Uses\x20https://github.com/gogo/protobuf\n\x20compiled\x20via\
    \x20`protoc\x20-I=.\x20-I=$GOPATH/src\x20\x20--gogofaster_out=.\x20proto\
    col.proto`\n\n\x08\n\x01\x02\x12\x03\x11\x08\n\n<\n\x02\x04\0\x12\x04\
    \x14\0\x1d\x01\x1a0\x20How\x20messages\x20are\x20delivered\x20to\x20the\
    \x20STAN\x20cluster\n\n\n\n\x03\x04\0\x01\x12\x03\x14\x08\x0e\n\x17\n\
    \x04\x04\0\x02\0\x12\x03\x15\x02\x16\"\n\x20ClientID\n\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x15\x02\x14\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x15\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x15\t\x11\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x15\x14\x15\n\x13\n\x04\x04\0\x02\x01\x12\x03\
    \x16\x02\x16\"\x06\x20guid\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x16\x02\
    \x15\x16\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x16\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x16\x14\x15\n\x16\n\x04\x04\0\x02\x02\x12\x03\x17\x02\x16\"\t\x20subjec\
    t\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x17\x02\x16\x16\n\x0c\n\x05\x04\
    \0\x02\x02\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\
    \x17\t\x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x17\x14\x15\n\x1d\n\x04\
    \x04\0\x02\x03\x12\x03\x18\x02\x16\"\x10\x20optional\x20reply\n\n\r\n\
    \x05\x04\0\x02\x03\x04\x12\x04\x18\x02\x17\x16\n\x0c\n\x05\x04\0\x02\x03\
    \x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x18\t\x0e\
    \n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x18\x14\x15\n\x16\n\x04\x04\0\x02\
    \x04\x12\x03\x19\x02\x16\"\t\x20payload\n\n\r\n\x05\x04\0\x02\x04\x04\
    \x12\x04\x19\x02\x18\x16\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x19\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x19\t\r\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03\x19\x14\x15\n]\n\x04\x04\0\x02\x05\x12\x03\x1a\x02\x16\
    \"P\x20Connection\x20ID.\x20For\x20servers\x20that\x20know\x20about\x20t\
    his\x20field,\x20clientID\x20can\x20be\x20omitted\n\n\r\n\x05\x04\0\x02\
    \x05\x04\x12\x04\x1a\x02\x19\x16\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\
    \x1a\x02\x07\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x1a\t\x0f\n\x0c\n\x05\
    \x04\0\x02\x05\x03\x12\x03\x1a\x14\x15\n&\n\x04\x04\0\x02\x06\x12\x03\
    \x1c\x02\x16\"\x19\x20optional\x20sha256\x20of\x20data\n\n\r\n\x05\x04\0\
    \x02\x06\x04\x12\x04\x1c\x02\x1a\x16\n\x0c\n\x05\x04\0\x02\x06\x05\x12\
    \x03\x1c\x02\x07\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x1c\t\x0f\n\x0c\n\
    \x05\x04\0\x02\x06\x03\x12\x03\x1c\x13\x15\n'\n\x02\x04\x01\x12\x04\x20\
    \0#\x01\x1a\x1b\x20Used\x20to\x20ACK\x20to\x20publishers\n\n\n\n\x03\x04\
    \x01\x01\x12\x03\x20\x08\x0e\n\x13\n\x04\x04\x01\x02\0\x12\x03!\x02\x13\
    \"\x06\x20guid\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04!\x02\x20\x10\n\x0c\
    \n\x05\x04\x01\x02\0\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03!\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03!\x11\x12\n4\n\x04\
    \x04\x01\x02\x01\x12\x03\"\x02\x13\"'\x20err\x20string,\x20empty/omitted\
    \x20if\x20no\x20error\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\"\x02!\x13\
    \n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\"\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\"\t\x0e\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\"\
    \x11\x12\n}\n\x02\x04\x02\x12\x04'\00\x01\x1aq\x20Msg\x20struct.\x20Sequ\
    ence\x20is\x20assigned\x20for\x20global\x20ordering\x20by\n\x20the\x20cl\
    uster\x20after\x20the\x20publisher\x20has\x20been\x20acknowledged.\n\n\n\
    \n\x03\x04\x02\x01\x12\x03'\x08\x10\nI\n\x04\x04\x02\x02\0\x12\x03(\x02\
    \x19\"<\x20globally\x20ordered\x20sequence\x20number\x20for\x20the\x20su\
    bject's\x20channel\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04(\x02'\x12\n\x0c\
    \n\x05\x04\x02\x02\0\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03(\t\x11\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03(\x17\x18\n\x16\n\
    \x04\x04\x02\x02\x01\x12\x03)\x02\x19\"\t\x20subject\n\n\r\n\x05\x04\x02\
    \x02\x01\x04\x12\x04)\x02(\x19\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03)\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03)\t\x10\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03)\x17\x18\n\x1d\n\x04\x04\x02\x02\x02\x12\x03*\
    \x02\x19\"\x10\x20optional\x20reply\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\
    \x04*\x02)\x19\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03*\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03*\t\x0e\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03*\x17\x18\n\x16\n\x04\x04\x02\x02\x03\x12\x03+\x02\x19\"\t\x20pa\
    yload\n\n\r\n\x05\x04\x02\x02\x03\x04\x12\x04+\x02*\x19\n\x0c\n\x05\x04\
    \x02\x02\x03\x05\x12\x03+\x02\x07\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\
    \x03+\t\r\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03+\x17\x18\n!\n\x04\x04\
    \x02\x02\x04\x12\x03,\x02\x19\"\x14\x20received\x20timestamp\n\n\r\n\x05\
    \x04\x02\x02\x04\x04\x12\x04,\x02+\x19\n\x0c\n\x05\x04\x02\x02\x04\x05\
    \x12\x03,\x02\x07\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03,\t\x12\n\x0c\n\
    \x05\x04\x02\x02\x04\x03\x12\x03,\x17\x18\nB\n\x04\x04\x02\x02\x05\x12\
    \x03-\x02\x19\"5\x20Flag\x20specifying\x20if\x20the\x20message\x20is\x20\
    being\x20redelivered\n\n\r\n\x05\x04\x02\x02\x05\x04\x12\x04-\x02,\x19\n\
    \x0c\n\x05\x04\x02\x02\x05\x05\x12\x03-\x02\x06\n\x0c\n\x05\x04\x02\x02\
    \x05\x01\x12\x03-\t\x14\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03-\x17\x18\
    \n\"\n\x04\x04\x02\x02\x06\x12\x03/\x02\x1a\"\x15\x20optional\x20IEEE\
    \x20CRC32\n\n\r\n\x05\x04\x02\x02\x06\x04\x12\x04/\x02-\x19\n\x0c\n\x05\
    \x04\x02\x02\x06\x05\x12\x03/\x02\x08\n\x0c\n\x05\x04\x02\x02\x06\x01\
    \x12\x03/\t\x0e\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03/\x17\x19\n:\n\
    \x02\x04\x03\x12\x043\06\x01\x1a.\x20Ack\x20will\x20deliver\x20an\x20ack\
    \x20for\x20a\x20delivered\x20msg.\n\n\n\n\x03\x04\x03\x01\x12\x033\x08\
    \x0b\n\x16\n\x04\x04\x03\x02\0\x12\x034\x02\x16\"\t\x20Subject\n\n\r\n\
    \x05\x04\x03\x02\0\x04\x12\x044\x023\r\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x034\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x034\t\x10\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x034\x14\x15\n&\n\x04\x04\x03\x02\x01\x12\x035\
    \x02\x16\"\x19\x20Sequence\x20to\x20acknowledge\n\n\r\n\x05\x04\x03\x02\
    \x01\x04\x12\x045\x024\x16\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x035\x02\
    \x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x035\t\x11\n\x0c\n\x05\x04\x03\
    \x02\x01\x03\x12\x035\x14\x15\n\x20\n\x02\x04\x04\x12\x049\0@\x01\x1a\
    \x14\x20Connection\x20Request\n\n\n\n\x03\x04\x04\x01\x12\x039\x08\x16\n\
    &\n\x04\x04\x04\x02\0\x12\x03:\x02\x1c\"\x19\x20Client\x20name/identifie\
    r.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04:\x029\x18\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03:\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03:\t\x11\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03:\x1a\x1b\n5\n\x04\x04\x04\x02\x01\
    \x12\x03;\x02\x1c\"(\x20Inbox\x20for\x20server\x20initiated\x20heartbeat\
    s.\n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04;\x02:\x1c\n\x0c\n\x05\x04\x04\
    \x02\x01\x05\x12\x03;\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03;\t\
    \x17\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03;\x1a\x1b\n)\n\x04\x04\x04\
    \x02\x02\x12\x03<\x02\x1c\"\x1c\x20Protocol\x20the\x20client\x20is\x20at\
    .\n\n\r\n\x05\x04\x04\x02\x02\x04\x12\x04<\x02;\x1c\n\x0c\n\x05\x04\x04\
    \x02\x02\x05\x12\x03<\x02\x07\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03<\t\
    \x11\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03<\x1a\x1b\no\n\x04\x04\x04\
    \x02\x03\x12\x03=\x02\x1c\"b\x20Connection\x20ID,\x20a\x20way\x20to\x20u\
    niquely\x20identify\x20a\x20connection\x20(no\x20connection\x20should\
    \x20ever\x20have\x20the\x20same)\n\n\r\n\x05\x04\x04\x02\x03\x04\x12\x04\
    =\x02<\x1c\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03=\x02\x07\n\x0c\n\x05\
    \x04\x04\x02\x03\x01\x12\x03=\t\x0f\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\
    \x03=\x1a\x1b\nT\n\x04\x04\x04\x02\x04\x12\x03>\x02\x1c\"G\x20Interval\
    \x20at\x20which\x20client\x20wishes\x20to\x20send\x20PINGs\x20(expressed\
    \x20in\x20seconds).\n\n\r\n\x05\x04\x04\x02\x04\x04\x12\x04>\x02=\x1c\n\
    \x0c\n\x05\x04\x04\x02\x04\x05\x12\x03>\x02\x07\n\x0c\n\x05\x04\x04\x02\
    \x04\x01\x12\x03>\t\x15\n\x0c\n\x05\x04\x04\x02\x04\x03\x12\x03>\x1a\x1b\
    \nl\n\x04\x04\x04\x02\x05\x12\x03?\x02\x1c\"_\x20Maximum\x20number\x20of\
    \x20PINGs\x20without\x20a\x20response\x20after\x20which\x20the\x20connec\
    tion\x20can\x20be\x20considered\x20lost.\n\n\r\n\x05\x04\x04\x02\x05\x04\
    \x12\x04?\x02>\x1c\n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x03?\x02\x07\n\
    \x0c\n\x05\x04\x04\x02\x05\x01\x12\x03?\t\x13\n\x0c\n\x05\x04\x04\x02\
    \x05\x03\x12\x03?\x1a\x1b\n*\n\x02\x04\x05\x12\x04C\0P\x01\x1a\x1e\x20Re\
    sponse\x20to\x20a\x20client\x20connect\n\n\n\n\x03\x04\x05\x01\x12\x03C\
    \x08\x17\nA\n\x04\x04\x05\x02\0\x12\x03D\x02\x1e\"4\x20Prefix\x20to\x20u\
    se\x20when\x20publishing\x20to\x20this\x20STAN\x20cluster\n\n\r\n\x05\
    \x04\x05\x02\0\x04\x12\x04D\x02C\x19\n\x0c\n\x05\x04\x05\x02\0\x05\x12\
    \x03D\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03D\t\x12\n\x0c\n\x05\
    \x04\x05\x02\0\x03\x12\x03D\x1c\x1d\n7\n\x04\x04\x05\x02\x01\x12\x03E\
    \x02\x1e\"*\x20Subject\x20to\x20use\x20for\x20subscription\x20requests\n\
    \n\r\n\x05\x04\x05\x02\x01\x04\x12\x04E\x02D\x1e\n\x0c\n\x05\x04\x05\x02\
    \x01\x05\x12\x03E\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03E\t\x14\
    \n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03E\x1c\x1d\n6\n\x04\x04\x05\x02\
    \x02\x12\x03F\x02\x1e\")\x20Subject\x20to\x20use\x20for\x20unsubscribe\
    \x20requests\n\n\r\n\x05\x04\x05\x02\x02\x04\x12\x04F\x02E\x1e\n\x0c\n\
    \x05\x04\x05\x02\x02\x05\x12\x03F\x02\x08\n\x0c\n\x05\x04\x05\x02\x02\
    \x01\x12\x03F\t\x16\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03F\x1c\x1d\n6\
    \n\x04\x04\x05\x02\x03\x12\x03G\x02\x1e\")\x20Subject\x20for\x20closing\
    \x20the\x20stan\x20connection\n\n\r\n\x05\x04\x05\x02\x03\x04\x12\x04G\
    \x02F\x1e\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x03G\x02\x08\n\x0c\n\x05\
    \x04\x05\x02\x03\x01\x12\x03G\t\x16\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\
    \x03G\x1c\x1d\n4\n\x04\x04\x05\x02\x04\x12\x03H\x02\x1e\"'\x20err\x20str\
    ing,\x20empty/omitted\x20if\x20no\x20error\n\n\r\n\x05\x04\x05\x02\x04\
    \x04\x12\x04H\x02G\x1e\n\x0c\n\x05\x04\x05\x02\x04\x05\x12\x03H\x02\x08\
    \n\x0c\n\x05\x04\x05\x02\x04\x01\x12\x03H\t\x0e\n\x0c\n\x05\x04\x05\x02\
    \x04\x03\x12\x03H\x1c\x1d\n=\n\x04\x04\x05\x02\x05\x12\x03I\x02\x1e\"0\
    \x20Subject\x20to\x20use\x20for\x20subscription\x20close\x20requests\n\n\
    \r\n\x05\x04\x05\x02\x05\x04\x12\x04I\x02H\x1e\n\x0c\n\x05\x04\x05\x02\
    \x05\x05\x12\x03I\x02\x08\n\x0c\n\x05\x04\x05\x02\x05\x01\x12\x03I\t\x19\
    \n\x0c\n\x05\x04\x05\x02\x05\x03\x12\x03I\x1c\x1d\n/\n\x04\x04\x05\x02\
    \x06\x12\x03J\x02\x1e\"\"\x20Subject\x20to\x20use\x20for\x20PING\x20requ\
    ests\n\n\r\n\x05\x04\x05\x02\x06\x04\x12\x04J\x02I\x1e\n\x0c\n\x05\x04\
    \x05\x02\x06\x05\x12\x03J\x02\x08\n\x0c\n\x05\x04\x05\x02\x06\x01\x12\
    \x03J\t\x15\n\x0c\n\x05\x04\x05\x02\x06\x03\x12\x03J\x1c\x1d\nQ\n\x04\
    \x04\x05\x02\x07\x12\x03K\x02\x1e\"D\x20Interval\x20at\x20which\x20clien\
    t\x20should\x20send\x20PINGs\x20(expressed\x20in\x20seconds).\n\n\r\n\
    \x05\x04\x05\x02\x07\x04\x12\x04K\x02J\x1e\n\x0c\n\x05\x04\x05\x02\x07\
    \x05\x12\x03K\x02\x07\n\x0c\n\x05\x04\x05\x02\x07\x01\x12\x03K\t\x15\n\
    \x0c\n\x05\x04\x05\x02\x07\x03\x12\x03K\x1c\x1d\nk\n\x04\x04\x05\x02\x08\
    \x12\x03L\x02\x1e\"^\x20Maximum\x20number\x20of\x20PINGs\x20without\x20a\
    \x20response\x20after\x20which\x20the\x20connection\x20can\x20be\x20cons\
    idered\x20lost\n\n\r\n\x05\x04\x05\x02\x08\x04\x12\x04L\x02K\x1e\n\x0c\n\
    \x05\x04\x05\x02\x08\x05\x12\x03L\x02\x07\n\x0c\n\x05\x04\x05\x02\x08\
    \x01\x12\x03L\t\x13\n\x0c\n\x05\x04\x05\x02\x08\x03\x12\x03L\x1c\x1d\n0\
    \n\x04\x04\x05\x02\t\x12\x03M\x02\x1f\"#\x20Protocol\x20version\x20the\
    \x20server\x20is\x20at\n\n\r\n\x05\x04\x05\x02\t\x04\x12\x04M\x02L\x1e\n\
    \x0c\n\x05\x04\x05\x02\t\x05\x12\x03M\x02\x07\n\x0c\n\x05\x04\x05\x02\t\
    \x01\x12\x03M\t\x11\n\x0c\n\x05\x04\x05\x02\t\x03\x12\x03M\x1c\x1e\n/\n\
    \x04\x04\x05\x02\n\x12\x03O\x02\x1d\"\"\x20Possibly\x20used\x20to\x20sig\
    n\x20acks,\x20etc.\n\n\r\n\x05\x04\x05\x02\n\x04\x12\x04O\x02M\x1f\n\x0c\
    \n\x05\x04\x05\x02\n\x05\x12\x03O\x02\x08\n\x0c\n\x05\x04\x05\x02\n\x01\
    \x12\x03O\t\x12\n\x0c\n\x05\x04\x05\x02\n\x03\x12\x03O\x19\x1c\n(\n\x02\
    \x04\x06\x12\x04S\0U\x01\x1a\x1c\x20PING\x20from\x20client\x20to\x20serv\
    er\n\n\n\n\x03\x04\x06\x01\x12\x03S\x08\x0c\n\x1c\n\x04\x04\x06\x02\0\
    \x12\x03T\x02\x16\"\x0f\x20Connection\x20ID\n\n\r\n\x05\x04\x06\x02\0\
    \x04\x12\x04T\x02S\x0e\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03T\x02\x07\n\
    \x0c\n\x05\x04\x06\x02\0\x01\x12\x03T\x08\x0e\n\x0c\n\x05\x04\x06\x02\0\
    \x03\x12\x03T\x14\x15\n+\n\x02\x04\x07\x12\x04X\0Z\x01\x1a\x1f\x20PING\
    \x20response\x20from\x20the\x20server\n\n\n\n\x03\x04\x07\x01\x12\x03X\
    \x08\x14\n6\n\x04\x04\x07\x02\0\x12\x03Y\x02\x16\")\x20Error\x20string,\
    \x20empty/omitted\x20if\x20no\x20error\n\n\r\n\x05\x04\x07\x02\0\x04\x12\
    \x04Y\x02X\x16\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03Y\x02\x08\n\x0c\n\
    \x05\x04\x07\x02\0\x01\x12\x03Y\t\x0e\n\x0c\n\x05\x04\x07\x02\0\x03\x12\
    \x03Y\x14\x15\n+\n\x02\x05\0\x12\x04]\0c\x03\x1a\x1f\x20Enum\x20for\x20s\
    tart\x20position\x20type.\n\n\n\n\x03\x05\0\x01\x12\x03]\x05\x12\n\x0b\n\
    \x04\x05\0\x02\0\x12\x03^\x04\x17\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03^\
    \x04\x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03^\x15\x16\n\x0b\n\x04\x05\0\
    \x02\x01\x12\x03_\x04\x17\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03_\x04\x10\
    \n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03_\x15\x16\n\x0b\n\x04\x05\0\x02\
    \x02\x12\x03`\x04\x17\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03`\x04\x12\n\
    \x0c\n\x05\x05\0\x02\x02\x02\x12\x03`\x15\x16\n\x0b\n\x04\x05\0\x02\x03\
    \x12\x03a\x04\x17\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03a\x04\x11\n\x0c\n\
    \x05\x05\0\x02\x03\x02\x12\x03a\x15\x16\n\x0b\n\x04\x05\0\x02\x04\x12\
    \x03b\x04\x17\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03b\x04\t\n\x0c\n\x05\
    \x05\0\x02\x04\x02\x12\x03b\x15\x16\n0\n\x02\x04\x08\x12\x04f\0q\x01\x1a\
    $\x20Protocol\x20for\x20a\x20client\x20to\x20subscribe\n\n\n\n\x03\x04\
    \x08\x01\x12\x03f\x08\x1b\n\x17\n\x04\x04\x08\x02\0\x12\x03g\x02#\"\n\
    \x20ClientID\n\n\r\n\x05\x04\x08\x02\0\x04\x12\x04g\x02f\x1d\n\x0c\n\x05\
    \x04\x08\x02\0\x05\x12\x03g\x02\x08\n\x0c\n\x05\x04\x08\x02\0\x01\x12\
    \x03g\x10\x18\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03g!\"\n;\n\x04\x04\x08\
    \x02\x01\x12\x03h\x02#\".\x20Formal\x20subject\x20to\x20subscribe\x20to,\
    \x20e.g.\x20foo.bar\n\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04h\x02g#\n\x0c\
    \n\x05\x04\x08\x02\x01\x05\x12\x03h\x02\x08\n\x0c\n\x05\x04\x08\x02\x01\
    \x01\x12\x03h\x10\x17\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03h!\"\n#\n\
    \x04\x04\x08\x02\x02\x12\x03i\x02#\"\x16\x20Optional\x20queue\x20group\n\
    \n\r\n\x05\x04\x08\x02\x02\x04\x12\x04i\x02h#\n\x0c\n\x05\x04\x08\x02\
    \x02\x05\x12\x03i\x02\x08\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03i\x10\
    \x16\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03i!\"\n3\n\x04\x04\x08\x02\
    \x03\x12\x03j\x02#\"&\x20Inbox\x20subject\x20to\x20deliver\x20messages\
    \x20on\n\n\r\n\x05\x04\x08\x02\x03\x04\x12\x04j\x02i#\n\x0c\n\x05\x04\
    \x08\x02\x03\x05\x12\x03j\x02\x08\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\
    \x03j\x10\x15\n\x0c\n\x05\x04\x08\x02\x03\x03\x12\x03j!\"\n?\n\x04\x04\
    \x08\x02\x04\x12\x03k\x02#\"2\x20Maximum\x20inflight\x20messages\x20with\
    out\x20an\x20ack\x20allowed\n\n\r\n\x05\x04\x08\x02\x04\x04\x12\x04k\x02\
    j#\n\x0c\n\x05\x04\x08\x02\x04\x05\x12\x03k\x02\x07\n\x0c\n\x05\x04\x08\
    \x02\x04\x01\x12\x03k\x10\x1b\n\x0c\n\x05\x04\x08\x02\x04\x03\x12\x03k!\
    \"\n;\n\x04\x04\x08\x02\x05\x12\x03l\x02#\".\x20Timeout\x20for\x20receiv\
    ing\x20an\x20ack\x20from\x20the\x20client\n\n\r\n\x05\x04\x08\x02\x05\
    \x04\x12\x04l\x02k#\n\x0c\n\x05\x04\x08\x02\x05\x05\x12\x03l\x02\x07\n\
    \x0c\n\x05\x04\x08\x02\x05\x01\x12\x03l\x10\x1d\n\x0c\n\x05\x04\x08\x02\
    \x05\x03\x12\x03l!\"\nC\n\x04\x04\x08\x02\x06\x12\x03m\x02#\"6\x20Option\
    al\x20durable\x20name\x20which\x20survives\x20client\x20restarts\n\n\r\n\
    \x05\x04\x08\x02\x06\x04\x12\x04m\x02l#\n\x0c\n\x05\x04\x08\x02\x06\x05\
    \x12\x03m\x02\x08\n\x0c\n\x05\x04\x08\x02\x06\x01\x12\x03m\x10\x1b\n\x0c\
    \n\x05\x04\x08\x02\x06\x03\x12\x03m!\"\n\x1d\n\x04\x04\x08\x02\x07\x12\
    \x03n\x02$\"\x10\x20Start\x20position\n\n\r\n\x05\x04\x08\x02\x07\x04\
    \x12\x04n\x02m#\n\x0c\n\x05\x04\x08\x02\x07\x06\x12\x03n\x02\x0f\n\x0c\n\
    \x05\x04\x08\x02\x07\x01\x12\x03n\x10\x1d\n\x0c\n\x05\x04\x08\x02\x07\
    \x03\x12\x03n!#\n-\n\x04\x04\x08\x02\x08\x12\x03o\x02$\"\x20\x20Optional\
    \x20start\x20sequence\x20number\n\n\r\n\x05\x04\x08\x02\x08\x04\x12\x04o\
    \x02n$\n\x0c\n\x05\x04\x08\x02\x08\x05\x12\x03o\x02\x08\n\x0c\n\x05\x04\
    \x08\x02\x08\x01\x12\x03o\x10\x1d\n\x0c\n\x05\x04\x08\x02\x08\x03\x12\
    \x03o!#\n\"\n\x04\x04\x08\x02\t\x12\x03p\x02$\"\x15\x20Optional\x20start\
    \x20time\n\n\r\n\x05\x04\x08\x02\t\x04\x12\x04p\x02o$\n\x0c\n\x05\x04\
    \x08\x02\t\x05\x12\x03p\x02\x07\n\x0c\n\x05\x04\x08\x02\t\x01\x12\x03p\
    \x10\x1e\n\x0c\n\x05\x04\x08\x02\t\x03\x12\x03p!#\nF\n\x02\x04\t\x12\x04\
    t\0w\x01\x1a:\x20Response\x20for\x20SubscriptionRequest\x20and\x20Unsubs\
    cribeRequests\n\n\n\n\x03\x04\t\x01\x12\x03t\x08\x1c\n(\n\x04\x04\t\x02\
    \0\x12\x03u\x02\x16\"\x1b\x20ackInbox\x20for\x20sending\x20acks\n\n\r\n\
    \x05\x04\t\x02\0\x04\x12\x04u\x02t\x1e\n\x0c\n\x05\x04\t\x02\0\x05\x12\
    \x03u\x02\x08\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03u\t\x11\n\x0c\n\x05\x04\
    \t\x02\0\x03\x12\x03u\x14\x15\n4\n\x04\x04\t\x02\x01\x12\x03v\x02\x16\"'\
    \x20err\x20string,\x20empty/omitted\x20if\x20no\x20error\n\n\r\n\x05\x04\
    \t\x02\x01\x04\x12\x04v\x02u\x16\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03v\
    \x02\x08\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03v\t\x0e\n\x0c\n\x05\x04\t\
    \x02\x01\x03\x12\x03v\x14\x15\nW\n\x02\x04\n\x12\x04z\0\x7f\x01\x1aK\x20\
    Protocol\x20for\x20a\x20clients\x20to\x20unsubscribe.\x20Will\x20return\
    \x20a\x20SubscriptionResponse\n\n\n\n\x03\x04\n\x01\x12\x03z\x08\x1a\n\
    \x17\n\x04\x04\n\x02\0\x12\x03{\x02\x19\"\n\x20ClientID\n\n\r\n\x05\x04\
    \n\x02\0\x04\x12\x04{\x02z\x1c\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03{\x02\
    \x08\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03{\t\x11\n\x0c\n\x05\x04\n\x02\0\
    \x03\x12\x03{\x17\x18\n+\n\x04\x04\n\x02\x01\x12\x03|\x02\x19\"\x1e\x20s\
    ubject\x20for\x20the\x20subscription\n\n\r\n\x05\x04\n\x02\x01\x04\x12\
    \x04|\x02{\x19\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03|\x02\x08\n\x0c\n\
    \x05\x04\n\x02\x01\x01\x12\x03|\t\x10\n\x0c\n\x05\x04\n\x02\x01\x03\x12\
    \x03|\x17\x18\n5\n\x04\x04\n\x02\x02\x12\x03}\x02\x19\"(\x20Inbox\x20sub\
    ject\x20to\x20identify\x20subscription\n\n\r\n\x05\x04\n\x02\x02\x04\x12\
    \x04}\x02|\x19\n\x0c\n\x05\x04\n\x02\x02\x05\x12\x03}\x02\x08\n\x0c\n\
    \x05\x04\n\x02\x02\x01\x12\x03}\t\x0e\n\x0c\n\x05\x04\n\x02\x02\x03\x12\
    \x03}\x17\x18\nC\n\x04\x04\n\x02\x03\x12\x03~\x02\x19\"6\x20Optional\x20\
    durable\x20name\x20which\x20survives\x20client\x20restarts\n\n\r\n\x05\
    \x04\n\x02\x03\x04\x12\x04~\x02}\x19\n\x0c\n\x05\x04\n\x02\x03\x05\x12\
    \x03~\x02\x08\n\x0c\n\x05\x04\n\x02\x03\x01\x12\x03~\t\x14\n\x0c\n\x05\
    \x04\n\x02\x03\x03\x12\x03~\x17\x18\n;\n\x02\x04\x0b\x12\x06\x82\x01\0\
    \x84\x01\x01\x1a-\x20Protocol\x20for\x20a\x20client\x20to\x20close\x20a\
    \x20connection\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\x82\x01\x08\x14\n:\n\
    \x04\x04\x0b\x02\0\x12\x04\x83\x01\x02\x16\",\x20Client\x20name\x20provi\
    ded\x20to\x20Connect()\x20requests\n\n\x0f\n\x05\x04\x0b\x02\0\x04\x12\
    \x06\x83\x01\x02\x82\x01\x16\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\x83\x01\
    \x02\x08\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\x83\x01\t\x11\n\r\n\x05\x04\
    \x0b\x02\0\x03\x12\x04\x83\x01\x14\x15\n)\n\x02\x04\x0c\x12\x06\x87\x01\
    \0\x89\x01\x01\x1a\x1b\x20Response\x20for\x20CloseRequest\n\n\x0b\n\x03\
    \x04\x0c\x01\x12\x04\x87\x01\x08\x15\n5\n\x04\x04\x0c\x02\0\x12\x04\x88\
    \x01\x02\x13\"'\x20err\x20string,\x20empty/omitted\x20if\x20no\x20error\
    \n\n\x0f\n\x05\x04\x0c\x02\0\x04\x12\x06\x88\x01\x02\x87\x01\x17\n\r\n\
    \x05\x04\x0c\x02\0\x05\x12\x04\x88\x01\x02\x08\n\r\n\x05\x04\x0c\x02\0\
    \x01\x12\x04\x88\x01\t\x0e\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\x88\x01\
    \x11\x12b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
